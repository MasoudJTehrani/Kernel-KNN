# -*- coding: utf-8 -*-
"""HW4_KNN_Kernel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DqfBuzzjMqdY29EB-Ykdmx8zuqmOMGTV

# Importing libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import style
style.use('fivethirtyeight')
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import math

"""# Importing datasets"""

Diabetes = pd.read_csv('Diabetes.txt', header=None, sep="\t")
Diabetes = Diabetes.drop(9, axis=1)

Ionosphere = pd.read_csv('Ionosphere.txt', header=None)

Sonar = pd.read_csv('Sonar.txt', header=None)

Breast = pd.read_csv('BreastTissue.txt', header=None, sep="\t")

Glass = pd.read_csv('Glass.txt', header=None, sep="\t")
Glass = Glass.drop(10, axis=1)

Wine = pd.read_csv('Wine.txt', header=None)

"""# Functions"""

def getSplit(dataset):
  X_train, X_test, y_train, y_test = train_test_split(dataset.iloc[:, :-1], dataset.iloc[:, -1], test_size = 0.3, shuffle=True)
  train = pd.concat([X_train, y_train], axis =1)
  test = pd.concat([X_test, y_test], axis =1)
  return train,test

def oneNN(xi,xj):
  xi = np.delete(xi, -1)
  xj = np.delete(xj, -1)
  subtract = xi - xj
  return np.matmul(subtract,subtract)

def linearKernel(xi,xj):
  xi = np.delete(xi, -1)
  xj = np.delete(xj, -1)
  return np.matmul(xi,xj)

def polyKernel(xi,xj,d):
  xi = np.delete(xi, -1)
  xj = np.delete(xj, -1)
  return np.matmul(xi,xj)**d

def RBFkernel(xi,xj,landa):
  xi = np.delete(xi, -1)
  xj = np.delete(xj, -1)
  subtract = xi - xj
  return np.exp(landa*math.sqrt(np.matmul(subtract,subtract)))

"""# 1NN classifier

## Glass
"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Glass)
  for test in test_ds.values:
    min = 100000
    for train in train_ds.values:
      sum = oneNN(train,test)
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\t1NN for Glass")
print("\t\t\t   %.2f%%" %(np.mean(accuracy)*100))

"""##Wine"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Wine)
  for test in test_ds.values:
    min = 100000
    for train in train_ds.values:
      sum = oneNN(train,test)
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\t1NN for Wine")
print("\t\t\t   %.2f%%" %(np.mean(accuracy)*100))

"""## Diabetes"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Diabetes)
  for test in test_ds.values:
    min = 100000
    for train in train_ds.values:
      sum = oneNN(train,test)
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\t1NN for Diabetes")
print("\t\t\t   %.2f%%" %(np.mean(accuracy)*100))

"""## Ionosphere"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Ionosphere)
  for test in test_ds.values:
    min = 100000
    for train in train_ds.values:
      sum = oneNN(train,test)
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\t1NN for Ionosphere")
print("\t\t\t   %.2f%%" %(np.mean(accuracy)*100))

"""## BreastTissue"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Breast)
  for test in test_ds.values:
    min = 100000
    for train in train_ds.values:
      sum = oneNN(train,test)
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\t1NN for Breast")
print("\t\t\t   %.2f%%" %(np.mean(accuracy)*100))

"""## Sonar"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Sonar)
  for test in test_ds.values:
    min = 100000
    for train in train_ds.values:
      sum = oneNN(train,test)
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\t1NN for Sonar")
print("\t\t\t   %.2f%%" %(np.mean(accuracy)*100))

"""# Linear Kernel

## Glass
"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Glass)
  for test in test_ds.values:
    min = 1000000
    for train in train_ds.values:
      sum = np.sum([ ((test[i] * test[i]) + (train[i] * train[i]) - (2 * (test[i] * train[i]))) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tLinear Kernel for Glass")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## Wine"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Wine)
  for test in test_ds.values:
    min = 1000000
    for train in train_ds.values:
      sum = np.sum([ ((test[i] * test[i]) + (train[i] * train[i]) - (2 * (test[i] * train[i]))) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tLinear kernel for Wine")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## Diabetes"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Diabetes)
  for test in test_ds.values:
    min = 1000000
    for train in train_ds.values:
      sum = np.sum([ ((test[i] * test[i]) + (train[i] * train[i]) - (2 * (test[i] * train[i]))) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tLinear kernel for Diabetes")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## Ionosphere"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Ionosphere)
  for test in test_ds.values:
    min = 1000000
    for train in train_ds.values:
      sum = np.sum([ ((test[i] * test[i]) + (train[i] * train[i]) - (2 * (test[i] * train[i]))) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tLinear kernel for Ionosphere")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## BreatTissue"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Breast)
  for test in test_ds.values:
    min = 1000000
    for train in train_ds.values:
      sum = np.sum([ ((test[i] * test[i]) + (train[i] * train[i]) - (2 * (test[i] * train[i]))) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tLinear kernel for Breast")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## Sonar"""

accuracy = []
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Sonar)
  for test in test_ds.values:
    min = 1000000
    for train in train_ds.values:
      sum = np.sum([ ((test[i] * test[i]) + (train[i] * train[i]) - (2 * (test[i] * train[i]))) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tLinear kernel for Sonar")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""# Polynomial kernel

## d = 1

### Glass
"""

accuracy = []
d = 1
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Glass)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=1 for Glass")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Wine"""

accuracy = []
d = 1
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Wine)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=1 for Wine")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Diabetes"""

accuracy = []
d = 1
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Diabetes)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=1 for Diabetes")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Ionosphere"""

accuracy = []
d = 1
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Ionosphere)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=1 for Ionosphere")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### BreastTissue"""

accuracy = []
d = 1
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Breast)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=1 for Breast")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Sonar"""

accuracy = []
d = 1
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Sonar)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=1 for Sonar")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## d = 2

### Glass
"""

accuracy = []
d = 2
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Glass)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=2 for Glass")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Wine"""

accuracy = []
d = 2
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Wine)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=2 for Wine")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Diabetes"""

accuracy = []
d = 2
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Diabetes)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=2 for Diabetes")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Ionosphere"""

accuracy = []
d = 2
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Ionosphere)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=2 for Ionosphere")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### BreastTissue"""

accuracy = []
d = 2
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Breast)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=2 for Breast")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Sonar"""

accuracy = []
d = 2
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Sonar)
  for test in test_ds.values:
    min = 100000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=2 for Sonar")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""## d = 3

### Glass
"""

accuracy = []
d = 3
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Glass)
  for test in test_ds.values:
    min = 100000000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=3 for Glass")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Wine"""

accuracy = []
d = 3
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Wine)
  for test in test_ds.values:
    min = 100000000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=3 for Wine")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Diabetes"""

accuracy = []
d = 3
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Diabetes)
  for test in test_ds.values:
    min = 100000000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=3 for Diabetes")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Ionosphere"""

accuracy = []
d = 3
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Ionosphere)
  for test in test_ds.values:
    min = 100000000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=3 for Ionosphere")
print("\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### BreastTissue"""

accuracy = []
d = 3
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Breast)
  for test in test_ds.values:
    min = 100000000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=3 for Breast")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""### Sonar"""

accuracy = []
d = 3
for R in range(10):
  Rlabel = 0
  labels = []
  train_ds, test_ds = getSplit(Sonar)
  for test in test_ds.values:
    min = 100000000000
    for train in train_ds.values:
      sum = np.sum([ ( ((test[i] * test[i])**d) + ((train[i] * train[i])**d) - (2*((test[i] * train[i])**d))  ) for i in range(len(test_ds.columns)-1) ])
      if sum < min:
        Rlabel = train[-1]
        min = sum
    labels.append(Rlabel)
  accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
print("\t\t\tPolynomial kernel d=3 for Sonar")
print("\t\t\t\t\t%.2f%%" %(np.mean(accuracy)*100))

"""# RBF Kernel

## Glass
"""

mean_acc = []
sigmas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
for sigma in sigmas:
  landa = 1/(2*(sigma**2))
  accuracy = []
  for R in range(10):
    Rlabel = 0
    labels = []
    train_ds, test_ds = getSplit(Glass)
    for test in test_ds.values:
      min = 100000000000
      for train in train_ds.values:
        sum = np.sum([ ( np.exp(-landa*(test[i] - test[i])**2) + np.exp(-landa*(train[i] - train[i])**2) - (2*np.exp(-landa*(test[i] - train[i])**2))  ) for i in range(len(test_ds.columns)-1) ])
        if sum < min:
          Rlabel = train[-1]
          min = sum
      labels.append(Rlabel)
    accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
  mean_acc.append(np.mean(accuracy))

print("\t\t\tRBF kernel for Glass & sigma=", sigmas[np.argmax(mean_acc)])
print("\t\t\t\t\t%.2f%%" %(mean_acc[np.argmax(mean_acc)]*100))

"""## Wine"""

mean_acc = []
sigmas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
for sigma in sigmas:
  landa = 1/(2*(sigma**2))
  accuracy = []
  for R in range(10):
    Rlabel = 0
    labels = []
    train_ds, test_ds = getSplit(Wine)
    for test in test_ds.values:
      min = 100000000000
      for train in train_ds.values:
        sum = np.sum([ ( np.exp(-landa*(test[i] - test[i])**2) + np.exp(-landa*(train[i] - train[i])**2) - (2*np.exp(-landa*(test[i] - train[i])**2))  ) for i in range(len(test_ds.columns)-1) ])
        if sum < min:
          Rlabel = train[-1]
          min = sum
      labels.append(Rlabel)
    accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
  mean_acc.append(np.mean(accuracy))

print("\t\t\tRBF kernel for Wine & sigma=", sigmas[np.argmax(mean_acc)])
print("\t\t\t\t\t%.2f%%" %(mean_acc[np.argmax(mean_acc)]*100))

"""## Diabetes"""

mean_acc = []
sigmas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
for sigma in sigmas:
  landa = 1/(2*(sigma**2))
  accuracy = []
  for R in range(10):
    Rlabel = 0
    labels = []
    train_ds, test_ds = getSplit(Diabetes)
    for test in test_ds.values:
      min = 100000000000
      for train in train_ds.values:
        sum = np.sum([ ( np.exp(-landa*(test[i] - test[i])**2) + np.exp(-landa*(train[i] - train[i])**2) - (2*np.exp(-landa*(test[i] - train[i])**2))  ) for i in range(len(test_ds.columns)-1) ])
        if sum < min:
          Rlabel = train[-1]
          min = sum
      labels.append(Rlabel)
    accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
  mean_acc.append(np.mean(accuracy))

print("\t\t\tRBF kernel for Diabetes & sigma=", sigmas[np.argmax(mean_acc)])
print("\t\t\t\t\t%.2f%%" %(mean_acc[np.argmax(mean_acc)]*100))

"""## Ionosphere"""

mean_acc = []
sigmas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
for sigma in sigmas:
  landa = 1/(2*(sigma**2))
  accuracy = []
  for R in range(10):
    Rlabel = 0
    labels = []
    train_ds, test_ds = getSplit(Ionosphere)
    for test in test_ds.values:
      min = 100000000000
      for train in train_ds.values:
        sum = np.sum([ ( np.exp(-landa*(test[i] - test[i])**2) + np.exp(-landa*(train[i] - train[i])**2) - (2*np.exp(-landa*(test[i] - train[i])**2))  ) for i in range(len(test_ds.columns)-1) ])
        if sum < min:
          Rlabel = train[-1]
          min = sum
      labels.append(Rlabel)
    accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
  mean_acc.append(np.mean(accuracy))

print("\t\t\tRBF kernel for Ionosphere & sigma=", sigmas[np.argmax(mean_acc)])
print("\t\t\t\t\t%.2f%%" %(mean_acc[np.argmax(mean_acc)]*100))

"""## BreastTissue"""

mean_acc = []
sigmas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
for sigma in sigmas:
  landa = 1/(2*(sigma**2))
  accuracy = []
  for R in range(10):
    Rlabel = 0
    labels = []
    train_ds, test_ds = getSplit(Breast)
    for test in test_ds.values:
      min = 100000000000
      for train in train_ds.values:
        sum = np.sum([ ( np.exp(-landa*(test[i] - test[i])**2) + np.exp(-landa*(train[i] - train[i])**2) - (2*np.exp(-landa*(test[i] - train[i])**2))  ) for i in range(len(test_ds.columns)-1) ])
        if sum < min:
          Rlabel = train[-1]
          min = sum
      labels.append(Rlabel)
    accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
  mean_acc.append(np.mean(accuracy))

print("\t\t\tRBF kernel for Breast & sigma=", sigmas[np.argmax(mean_acc)])
print("\t\t\t\t\t%.2f%%" %(mean_acc[np.argmax(mean_acc)]*100))

"""## Sonar"""

mean_acc = []
sigmas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
for sigma in sigmas:
  landa = 1/(2*(sigma**2))
  accuracy = []
  for R in range(10):
    Rlabel = 0
    labels = []
    train_ds, test_ds = getSplit(Sonar)
    for test in test_ds.values:
      min = 100000000000
      for train in train_ds.values:
        sum = np.sum([ ( np.exp(-landa*(test[i] - test[i])**2) + np.exp(-landa*(train[i] - train[i])**2) - (2*np.exp(-landa*(test[i] - train[i])**2))  ) for i in range(len(test_ds.columns)-1) ])
        if sum < min:
          Rlabel = train[-1]
          min = sum
      labels.append(Rlabel)
    accuracy.append(accuracy_score(test_ds.iloc[:,-1], labels))
  mean_acc.append(np.mean(accuracy))

print("\t\t\tRBF kernel for Sonar & sigma=", sigmas[np.argmax(mean_acc)])
print("\t\t\t\t\t%.2f%%" %(mean_acc[np.argmax(mean_acc)]*100))